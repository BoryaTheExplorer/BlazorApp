@page "/"
@using BlazorApp.Models

@inject IGitHubService GitHubService

@rendermode InteractiveServer


<h3>Versions</h3>

<div>
    @foreach (var item in _tags)
    {
        <Commit OnRollbackClick="() => SetBranchToCommitAsync(item.Commit.Sha)" OnDeployClick="() => TriggerMainDeployment()" Url="@GetCommitUrl(item.Commit.Sha)" Repo="@_repo" Tag="@item.Name" IsActiveCommit="@IsMainAtCommit(item.Commit.Sha)" />
    }
</div>

@code {
    private List<Tag> _tags = new List<Tag>();

    private string _token = Environment.GetEnvironmentVariable("GITHUB_TOKEN")!;
    private string _owner = "BoryaTheExplorer";
    private string _repo = "BlazorApp";
    private string _mainSha = "";

    protected override async Task OnInitializedAsync()
    {
        _mainSha = await GitHubService.GetBranchShaAsync(_token, _owner, _repo);
        _tags = await GitHubService.GetTagsAsync(_token, _owner, _repo);
    }
    protected string GetCommitUrl(string sha)
    {
        return $"https://github.com/{_owner}/{_repo}/commit/{sha}";
    }
    protected string GetFormattedDate(string date)
    {
        return date.Remove(10, date.Length);
    }
    protected bool IsMainAtCommit(string commitSha)
    {
        return string.Equals(commitSha, _mainSha, StringComparison.OrdinalIgnoreCase); ;
    }
    protected async Task SetBranchToCommitAsync(string commitSha)
    {
        await GitHubService.SetBranchToCommitAsync(_token, _owner, _repo, commitSha);
    }
    protected async Task TriggerMainDeployment()
    {
        await GitHubService.TriggerWorkflowAsync(_token, _owner, _repo, "deploy.yml", "main");
    }
}
